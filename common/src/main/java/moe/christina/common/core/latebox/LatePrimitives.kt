package moe.christina.common.core.latebox

abstract class LateNumber<out T : Number>(delegate: () -> T) : LateValue<T>(delegate) {
    fun toDouble(): Double = actual().toDouble()
    fun toFloat(): Float = actual().toFloat()
    fun toLong(): Long = actual().toLong()
    fun toInt(): Int = actual().toInt()
    fun toChar(): Char = actual().toChar()
    fun toShort(): Short = actual().toShort()
    fun toByte(): Byte = actual().toByte()
}

fun (() -> Byte).asLateDelegate(): LateByte = LateByte(this)

fun Byte.late(): LateByte = { this }.asLateDelegate()

operator fun Byte.plus(other: LateByte): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Short.plus(other: LateByte): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Int.plus(other: LateByte): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Long.plus(other: LateByte): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Float.plus(other: LateByte): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Double.plus(other: LateByte): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Byte.minus(other: LateByte): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Short.minus(other: LateByte): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Int.minus(other: LateByte): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Long.minus(other: LateByte): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Float.minus(other: LateByte): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Double.minus(other: LateByte): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Byte.times(other: LateByte): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Short.times(other: LateByte): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Int.times(other: LateByte): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Long.times(other: LateByte): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Float.times(other: LateByte): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Double.times(other: LateByte): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Byte.div(other: LateByte): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Short.div(other: LateByte): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Int.div(other: LateByte): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Long.div(other: LateByte): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Float.div(other: LateByte): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Double.div(other: LateByte): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Byte.rem(other: LateByte): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Short.rem(other: LateByte): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Int.rem(other: LateByte): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Long.rem(other: LateByte): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Float.rem(other: LateByte): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Double.rem(other: LateByte): LateDouble = { other.actual().rem(this) }.asLateDelegate()

class LateByte(delegate: () -> Byte) : LateNumber<Byte>(delegate) {
    operator fun plus(other: Byte): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Short): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Int): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Long): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Float): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Double): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun minus(other: Byte): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Short): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Int): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Long): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Float): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Double): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun times(other: Byte): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Short): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Int): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Long): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Float): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Double): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun div(other: Byte): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Short): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Int): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Long): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Float): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Double): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun rem(other: Byte): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Short): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Int): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Long): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Float): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Double): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun inc(): LateByte = { actual().inc() }.asLateDelegate()
    operator fun dec(): LateByte = { actual().dec() }.asLateDelegate()
    operator fun unaryPlus(): LateInt = { actual().unaryPlus() }.asLateDelegate()
    operator fun unaryMinus(): LateInt = { actual().unaryMinus() }.asLateDelegate()

    operator fun plus(other: () -> Int): LateInt = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Long): LateLong = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Float): LateFloat = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Double): LateDouble = { actual().plus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Int): LateInt = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Long): LateLong = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Float): LateFloat = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Double): LateDouble = { actual().minus(other()) }.asLateDelegate()
    operator fun times(other: () -> Int): LateInt = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Long): LateLong = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Float): LateFloat = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Double): LateDouble = { actual().times(other()) }.asLateDelegate()
    operator fun div(other: () -> Int): LateInt = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Long): LateLong = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Float): LateFloat = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Double): LateDouble = { actual().div(other()) }.asLateDelegate()
    operator fun rem(other: () -> Int): LateInt = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Long): LateLong = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Float): LateFloat = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Double): LateDouble = { actual().rem(other()) }.asLateDelegate()

    operator fun plus(other: LateByte): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateShort): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateInt): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateLong): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateFloat): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateDouble): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateByte): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateShort): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateInt): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateLong): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateFloat): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateDouble): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun times(other: LateByte): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateShort): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateInt): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateLong): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateFloat): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateDouble): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun div(other: LateByte): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateShort): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateInt): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateLong): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateFloat): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateDouble): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateByte): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateShort): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateInt): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateLong): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateFloat): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateDouble): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
}

fun (() -> Short).asLateDelegate(): LateShort = LateShort(this)

fun Short.late(): LateShort = { this }.asLateDelegate()

operator fun Byte.plus(other: LateShort): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Short.plus(other: LateShort): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Int.plus(other: LateShort): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Long.plus(other: LateShort): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Float.plus(other: LateShort): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Double.plus(other: LateShort): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Byte.minus(other: LateShort): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Short.minus(other: LateShort): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Int.minus(other: LateShort): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Long.minus(other: LateShort): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Float.minus(other: LateShort): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Double.minus(other: LateShort): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Byte.times(other: LateShort): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Short.times(other: LateShort): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Int.times(other: LateShort): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Long.times(other: LateShort): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Float.times(other: LateShort): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Double.times(other: LateShort): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Byte.div(other: LateShort): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Short.div(other: LateShort): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Int.div(other: LateShort): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Long.div(other: LateShort): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Float.div(other: LateShort): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Double.div(other: LateShort): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Byte.rem(other: LateShort): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Short.rem(other: LateShort): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Int.rem(other: LateShort): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Long.rem(other: LateShort): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Float.rem(other: LateShort): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Double.rem(other: LateShort): LateDouble = { other.actual().rem(this) }.asLateDelegate()

class LateShort(delegate: () -> Short) : LateNumber<Short>(delegate) {
    operator fun plus(other: Byte): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Short): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Int): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Long): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Float): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Double): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun minus(other: Byte): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Short): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Int): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Long): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Float): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Double): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun times(other: Byte): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Short): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Int): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Long): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Float): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Double): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun div(other: Byte): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Short): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Int): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Long): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Float): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Double): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun rem(other: Byte): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Short): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Int): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Long): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Float): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Double): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun inc(): LateShort = { actual().inc() }.asLateDelegate()
    operator fun dec(): LateShort = { actual().dec() }.asLateDelegate()
    operator fun unaryPlus(): LateInt = { actual().unaryPlus() }.asLateDelegate()
    operator fun unaryMinus(): LateInt = { actual().unaryMinus() }.asLateDelegate()

    operator fun plus(other: () -> Int): LateInt = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Long): LateLong = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Float): LateFloat = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Double): LateDouble = { actual().plus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Int): LateInt = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Long): LateLong = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Float): LateFloat = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Double): LateDouble = { actual().minus(other()) }.asLateDelegate()
    operator fun times(other: () -> Int): LateInt = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Long): LateLong = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Float): LateFloat = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Double): LateDouble = { actual().times(other()) }.asLateDelegate()
    operator fun div(other: () -> Int): LateInt = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Long): LateLong = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Float): LateFloat = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Double): LateDouble = { actual().div(other()) }.asLateDelegate()
    operator fun rem(other: () -> Int): LateInt = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Long): LateLong = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Float): LateFloat = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Double): LateDouble = { actual().rem(other()) }.asLateDelegate()

    operator fun plus(other: LateByte): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateShort): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateInt): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateLong): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateFloat): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateDouble): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateByte): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateShort): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateInt): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateLong): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateFloat): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateDouble): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun times(other: LateByte): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateShort): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateInt): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateLong): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateFloat): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateDouble): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun div(other: LateByte): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateShort): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateInt): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateLong): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateFloat): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateDouble): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateByte): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateShort): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateInt): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateLong): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateFloat): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateDouble): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
}

fun (() -> Int).asLateDelegate(): LateInt = LateInt(this)

fun Int.late(): LateInt = { this }.asLateDelegate()

operator fun Byte.plus(other: LateInt): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Short.plus(other: LateInt): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Int.plus(other: LateInt): LateInt = { other.actual().plus(this) }.asLateDelegate()
operator fun Long.plus(other: LateInt): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Float.plus(other: LateInt): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Double.plus(other: LateInt): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Byte.minus(other: LateInt): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Short.minus(other: LateInt): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Int.minus(other: LateInt): LateInt = { other.actual().minus(this) }.asLateDelegate()
operator fun Long.minus(other: LateInt): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Float.minus(other: LateInt): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Double.minus(other: LateInt): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Byte.times(other: LateInt): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Short.times(other: LateInt): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Int.times(other: LateInt): LateInt = { other.actual().times(this) }.asLateDelegate()
operator fun Long.times(other: LateInt): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Float.times(other: LateInt): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Double.times(other: LateInt): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Byte.div(other: LateInt): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Short.div(other: LateInt): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Int.div(other: LateInt): LateInt = { other.actual().div(this) }.asLateDelegate()
operator fun Long.div(other: LateInt): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Float.div(other: LateInt): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Double.div(other: LateInt): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Byte.rem(other: LateInt): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Short.rem(other: LateInt): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Int.rem(other: LateInt): LateInt = { other.actual().rem(this) }.asLateDelegate()
operator fun Long.rem(other: LateInt): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Float.rem(other: LateInt): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Double.rem(other: LateInt): LateDouble = { other.actual().rem(this) }.asLateDelegate()

class LateInt(delegate: () -> Int) : LateNumber<Int>(delegate) {
    operator fun plus(other: Byte): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Short): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Int): LateInt = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Long): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Float): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Double): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun minus(other: Byte): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Short): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Int): LateInt = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Long): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Float): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Double): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun times(other: Byte): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Short): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Int): LateInt = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Long): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Float): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Double): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun div(other: Byte): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Short): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Int): LateInt = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Long): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Float): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Double): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun rem(other: Byte): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Short): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Int): LateInt = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Long): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Float): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Double): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun inc(): LateInt = { actual().inc() }.asLateDelegate()
    operator fun dec(): LateInt = { actual().dec() }.asLateDelegate()
    operator fun unaryPlus(): LateInt = { actual().unaryPlus() }.asLateDelegate()
    operator fun unaryMinus(): LateInt = { actual().unaryMinus() }.asLateDelegate()
    infix fun shl(bitCount: Int): LateInt = { actual().shl(bitCount) }.asLateDelegate()
    infix fun shr(bitCount: Int): LateInt = { actual().shr(bitCount) }.asLateDelegate()
    infix fun ushr(bitCount: Int): LateInt = { actual().ushr(bitCount) }.asLateDelegate()
    infix fun and(other: Int): LateInt = { actual().and(other) }.asLateDelegate()
    infix fun or(other: Int): LateInt = { actual().or(other) }.asLateDelegate()
    infix fun xor(other: Int): LateInt = { actual().xor(other) }.asLateDelegate()
    fun inv(): LateInt = { actual().inv() }.asLateDelegate()

    operator fun plus(other: () -> Int): LateInt = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Long): LateLong = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Float): LateFloat = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Double): LateDouble = { actual().plus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Int): LateInt = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Long): LateLong = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Float): LateFloat = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Double): LateDouble = { actual().minus(other()) }.asLateDelegate()
    operator fun times(other: () -> Int): LateInt = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Long): LateLong = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Float): LateFloat = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Double): LateDouble = { actual().times(other()) }.asLateDelegate()
    operator fun div(other: () -> Int): LateInt = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Long): LateLong = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Float): LateFloat = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Double): LateDouble = { actual().div(other()) }.asLateDelegate()
    operator fun rem(other: () -> Int): LateInt = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Long): LateLong = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Float): LateFloat = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Double): LateDouble = { actual().rem(other()) }.asLateDelegate()
    infix fun shl(bitCount: () -> Int): LateInt = { actual().shl(bitCount()) }.asLateDelegate()
    infix fun shr(bitCount: () -> Int): LateInt = { actual().shr(bitCount()) }.asLateDelegate()
    infix fun ushr(bitCount: () -> Int): LateInt = { actual().ushr(bitCount()) }.asLateDelegate()
    infix fun and(other: () -> Int): LateInt = { actual().and(other()) }.asLateDelegate()
    infix fun or(other: () -> Int): LateInt = { actual().or(other()) }.asLateDelegate()
    infix fun xor(other: () -> Int): LateInt = { actual().xor(other()) }.asLateDelegate()

    operator fun plus(other: LateByte): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateShort): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateInt): LateInt = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateLong): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateFloat): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateDouble): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateByte): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateShort): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateInt): LateInt = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateLong): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateFloat): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateDouble): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun times(other: LateByte): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateShort): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateInt): LateInt = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateLong): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateFloat): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateDouble): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun div(other: LateByte): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateShort): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateInt): LateInt = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateLong): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateFloat): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateDouble): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateByte): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateShort): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateInt): LateInt = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateLong): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateFloat): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateDouble): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    infix fun shl(bitCount: LateInt): LateInt = { actual().shl(bitCount.actual()) }.asLateDelegate()
    infix fun shr(bitCount: LateInt): LateInt = { actual().shr(bitCount.actual()) }.asLateDelegate()
    infix fun ushr(bitCount: LateInt): LateInt = { actual().ushr(bitCount.actual()) }.asLateDelegate()
    infix fun and(other: LateInt): LateInt = { actual().and(other.actual()) }.asLateDelegate()
    infix fun or(other: LateInt): LateInt = { actual().or(other.actual()) }.asLateDelegate()
    infix fun xor(other: LateInt): LateInt = { actual().xor(other.actual()) }.asLateDelegate()
}

fun (() -> Long).asLateDelegate(): LateLong = LateLong(this)

fun Long.late(): LateLong = { this }.asLateDelegate()

operator fun Byte.plus(other: LateLong): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Short.plus(other: LateLong): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Int.plus(other: LateLong): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Long.plus(other: LateLong): LateLong = { other.actual().plus(this) }.asLateDelegate()
operator fun Float.plus(other: LateLong): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Double.plus(other: LateLong): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Byte.minus(other: LateLong): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Short.minus(other: LateLong): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Int.minus(other: LateLong): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Long.minus(other: LateLong): LateLong = { other.actual().minus(this) }.asLateDelegate()
operator fun Float.minus(other: LateLong): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Double.minus(other: LateLong): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Byte.times(other: LateLong): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Short.times(other: LateLong): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Int.times(other: LateLong): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Long.times(other: LateLong): LateLong = { other.actual().times(this) }.asLateDelegate()
operator fun Float.times(other: LateLong): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Double.times(other: LateLong): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Byte.div(other: LateLong): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Short.div(other: LateLong): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Int.div(other: LateLong): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Long.div(other: LateLong): LateLong = { other.actual().div(this) }.asLateDelegate()
operator fun Float.div(other: LateLong): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Double.div(other: LateLong): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Byte.rem(other: LateLong): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Short.rem(other: LateLong): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Int.rem(other: LateLong): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Long.rem(other: LateLong): LateLong = { other.actual().rem(this) }.asLateDelegate()
operator fun Float.rem(other: LateLong): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Double.rem(other: LateLong): LateDouble = { other.actual().rem(this) }.asLateDelegate()

class LateLong(delegate: () -> Long) : LateNumber<Long>(delegate) {
    operator fun plus(other: Byte): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Short): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Int): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Long): LateLong = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Float): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Double): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun minus(other: Byte): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Short): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Int): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Long): LateLong = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Float): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Double): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun times(other: Byte): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Short): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Int): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Long): LateLong = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Float): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Double): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun div(other: Byte): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Short): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Int): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Long): LateLong = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Float): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Double): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun rem(other: Byte): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Short): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Int): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Long): LateLong = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Float): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Double): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun inc(): LateLong = { actual().inc() }.asLateDelegate()
    operator fun dec(): LateLong = { actual().dec() }.asLateDelegate()
    operator fun unaryPlus(): LateLong = { actual().unaryPlus() }.asLateDelegate()
    operator fun unaryMinus(): LateLong = { actual().unaryMinus() }.asLateDelegate()
    infix fun shl(bitCount: Int): LateLong = { actual().shl(bitCount) }.asLateDelegate()
    infix fun shr(bitCount: Int): LateLong = { actual().shr(bitCount) }.asLateDelegate()
    infix fun ushr(bitCount: Int): LateLong = { actual().ushr(bitCount) }.asLateDelegate()
    infix fun and(other: Long): LateLong = { actual().and(other) }.asLateDelegate()
    infix fun or(other: Long): LateLong = { actual().or(other) }.asLateDelegate()
    infix fun xor(other: Long): LateLong = { actual().xor(other) }.asLateDelegate()
    fun inv(): LateLong = { actual().inv() }.asLateDelegate()

    operator fun plus(other: () -> Long): LateLong = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Float): LateFloat = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Double): LateDouble = { actual().plus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Long): LateLong = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Float): LateFloat = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Double): LateDouble = { actual().minus(other()) }.asLateDelegate()
    operator fun times(other: () -> Long): LateLong = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Float): LateFloat = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Double): LateDouble = { actual().times(other()) }.asLateDelegate()
    operator fun div(other: () -> Long): LateLong = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Float): LateFloat = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Double): LateDouble = { actual().div(other()) }.asLateDelegate()
    operator fun rem(other: () -> Long): LateLong = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Float): LateFloat = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Double): LateDouble = { actual().rem(other()) }.asLateDelegate()
    infix fun shl(bitCount: () -> Int): LateLong = { actual().shl(bitCount()) }.asLateDelegate()
    infix fun shr(bitCount: () -> Int): LateLong = { actual().shr(bitCount()) }.asLateDelegate()
    infix fun ushr(bitCount: () -> Int): LateLong = { actual().ushr(bitCount()) }.asLateDelegate()
    infix fun and(other: () -> Long): LateLong = { actual().and(other()) }.asLateDelegate()
    infix fun or(other: () -> Long): LateLong = { actual().or(other()) }.asLateDelegate()
    infix fun xor(other: () -> Long): LateLong = { actual().xor(other()) }.asLateDelegate()

    operator fun plus(other: LateByte): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateShort): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateInt): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateLong): LateLong = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateFloat): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateDouble): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateByte): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateShort): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateInt): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateLong): LateLong = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateFloat): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateDouble): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun times(other: LateByte): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateShort): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateInt): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateLong): LateLong = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateFloat): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateDouble): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun div(other: LateByte): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateShort): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateInt): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateLong): LateLong = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateFloat): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateDouble): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateByte): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateShort): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateInt): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateLong): LateLong = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateFloat): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateDouble): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    infix fun shl(bitCount: LateInt): LateLong = { actual().shl(bitCount.actual()) }.asLateDelegate()
    infix fun shr(bitCount: LateInt): LateLong = { actual().shr(bitCount.actual()) }.asLateDelegate()
    infix fun ushr(bitCount: LateInt): LateLong = { actual().ushr(bitCount.actual()) }.asLateDelegate()
    infix fun and(other: LateLong): LateLong = { actual().and(other.actual()) }.asLateDelegate()
    infix fun or(other: LateLong): LateLong = { actual().or(other.actual()) }.asLateDelegate()
    infix fun xor(other: LateLong): LateLong = { actual().xor(other.actual()) }.asLateDelegate()
}

fun (() -> Float).asLateDelegate(): LateFloat = LateFloat(this)

fun Float.late(): LateFloat = { this }.asLateDelegate()

operator fun Byte.plus(other: LateFloat): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Short.plus(other: LateFloat): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Int.plus(other: LateFloat): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Long.plus(other: LateFloat): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Float.plus(other: LateFloat): LateFloat = { other.actual().plus(this) }.asLateDelegate()
operator fun Double.plus(other: LateFloat): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Byte.minus(other: LateFloat): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Short.minus(other: LateFloat): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Int.minus(other: LateFloat): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Long.minus(other: LateFloat): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Float.minus(other: LateFloat): LateFloat = { other.actual().minus(this) }.asLateDelegate()
operator fun Double.minus(other: LateFloat): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Byte.times(other: LateFloat): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Short.times(other: LateFloat): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Int.times(other: LateFloat): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Long.times(other: LateFloat): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Float.times(other: LateFloat): LateFloat = { other.actual().times(this) }.asLateDelegate()
operator fun Double.times(other: LateFloat): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Byte.div(other: LateFloat): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Short.div(other: LateFloat): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Int.div(other: LateFloat): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Long.div(other: LateFloat): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Float.div(other: LateFloat): LateFloat = { other.actual().div(this) }.asLateDelegate()
operator fun Double.div(other: LateFloat): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Byte.rem(other: LateFloat): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Short.rem(other: LateFloat): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Int.rem(other: LateFloat): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Long.rem(other: LateFloat): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Float.rem(other: LateFloat): LateFloat = { other.actual().rem(this) }.asLateDelegate()
operator fun Double.rem(other: LateFloat): LateDouble = { other.actual().rem(this) }.asLateDelegate()

class LateFloat(delegate: () -> Float) : LateNumber<Float>(delegate) {
    operator fun plus(other: Byte): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Short): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Int): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Long): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Float): LateFloat = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Double): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun minus(other: Byte): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Short): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Int): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Long): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Float): LateFloat = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Double): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun times(other: Byte): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Short): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Int): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Long): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Float): LateFloat = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Double): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun div(other: Byte): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Short): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Int): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Long): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Float): LateFloat = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Double): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun rem(other: Byte): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Short): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Int): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Long): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Float): LateFloat = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Double): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun inc(): LateFloat = { actual().inc() }.asLateDelegate()
    operator fun dec(): LateFloat = { actual().dec() }.asLateDelegate()
    operator fun unaryPlus(): LateFloat = { actual().unaryPlus() }.asLateDelegate()
    operator fun unaryMinus(): LateFloat = { actual().unaryMinus() }.asLateDelegate()

    operator fun plus(other: () -> Float): LateFloat = { actual().plus(other()) }.asLateDelegate()
    operator fun plus(other: () -> Double): LateDouble = { actual().plus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Float): LateFloat = { actual().minus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Double): LateDouble = { actual().minus(other()) }.asLateDelegate()
    operator fun times(other: () -> Float): LateFloat = { actual().times(other()) }.asLateDelegate()
    operator fun times(other: () -> Double): LateDouble = { actual().times(other()) }.asLateDelegate()
    operator fun div(other: () -> Float): LateFloat = { actual().div(other()) }.asLateDelegate()
    operator fun div(other: () -> Double): LateDouble = { actual().div(other()) }.asLateDelegate()
    operator fun rem(other: () -> Float): LateFloat = { actual().rem(other()) }.asLateDelegate()
    operator fun rem(other: () -> Double): LateDouble = { actual().rem(other()) }.asLateDelegate()

    operator fun plus(other: LateByte): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateShort): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateInt): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateLong): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateFloat): LateFloat = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateDouble): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateByte): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateShort): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateInt): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateLong): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateFloat): LateFloat = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateDouble): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun times(other: LateByte): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateShort): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateInt): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateLong): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateFloat): LateFloat = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateDouble): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun div(other: LateByte): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateShort): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateInt): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateLong): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateFloat): LateFloat = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateDouble): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateByte): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateShort): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateInt): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateLong): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateFloat): LateFloat = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateDouble): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
}

fun (() -> Double).asLateDelegate(): LateDouble = LateDouble(this)

fun Double.late(): LateDouble = { this }.asLateDelegate()

operator fun Byte.plus(other: LateDouble): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Short.plus(other: LateDouble): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Int.plus(other: LateDouble): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Long.plus(other: LateDouble): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Float.plus(other: LateDouble): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Double.plus(other: LateDouble): LateDouble = { other.actual().plus(this) }.asLateDelegate()
operator fun Byte.minus(other: LateDouble): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Short.minus(other: LateDouble): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Int.minus(other: LateDouble): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Long.minus(other: LateDouble): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Float.minus(other: LateDouble): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Double.minus(other: LateDouble): LateDouble = { other.actual().minus(this) }.asLateDelegate()
operator fun Byte.times(other: LateDouble): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Short.times(other: LateDouble): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Int.times(other: LateDouble): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Long.times(other: LateDouble): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Float.times(other: LateDouble): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Double.times(other: LateDouble): LateDouble = { other.actual().times(this) }.asLateDelegate()
operator fun Byte.div(other: LateDouble): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Short.div(other: LateDouble): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Int.div(other: LateDouble): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Long.div(other: LateDouble): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Float.div(other: LateDouble): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Double.div(other: LateDouble): LateDouble = { other.actual().div(this) }.asLateDelegate()
operator fun Byte.rem(other: LateDouble): LateDouble = { other.actual().rem(this) }.asLateDelegate()
operator fun Short.rem(other: LateDouble): LateDouble = { other.actual().rem(this) }.asLateDelegate()
operator fun Int.rem(other: LateDouble): LateDouble = { other.actual().rem(this) }.asLateDelegate()
operator fun Long.rem(other: LateDouble): LateDouble = { other.actual().rem(this) }.asLateDelegate()
operator fun Float.rem(other: LateDouble): LateDouble = { other.actual().rem(this) }.asLateDelegate()
operator fun Double.rem(other: LateDouble): LateDouble = { other.actual().rem(this) }.asLateDelegate()

class LateDouble(delegate: () -> Double) : LateNumber<Double>(delegate) {
    operator fun plus(other: Byte): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Short): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Int): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Long): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Float): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun plus(other: Double): LateDouble = { actual().plus(other) }.asLateDelegate()
    operator fun minus(other: Byte): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Short): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Int): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Long): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Float): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun minus(other: Double): LateDouble = { actual().minus(other) }.asLateDelegate()
    operator fun times(other: Byte): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Short): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Int): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Long): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Float): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun times(other: Double): LateDouble = { actual().times(other) }.asLateDelegate()
    operator fun div(other: Byte): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Short): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Int): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Long): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Float): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun div(other: Double): LateDouble = { actual().div(other) }.asLateDelegate()
    operator fun rem(other: Byte): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Short): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Int): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Long): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Float): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun rem(other: Double): LateDouble = { actual().rem(other) }.asLateDelegate()
    operator fun inc(): LateDouble = { actual().inc() }.asLateDelegate()
    operator fun dec(): LateDouble = { actual().dec() }.asLateDelegate()
    operator fun unaryPlus(): LateDouble = { actual().unaryPlus() }.asLateDelegate()
    operator fun unaryMinus(): LateDouble = { actual().unaryMinus() }.asLateDelegate()

    operator fun plus(other: () -> Double): LateDouble = { actual().plus(other()) }.asLateDelegate()
    operator fun minus(other: () -> Double): LateDouble = { actual().minus(other()) }.asLateDelegate()
    operator fun times(other: () -> Double): LateDouble = { actual().times(other()) }.asLateDelegate()
    operator fun div(other: () -> Double): LateDouble = { actual().div(other()) }.asLateDelegate()
    operator fun rem(other: () -> Double): LateDouble = { actual().rem(other()) }.asLateDelegate()

    operator fun plus(other: LateByte): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateShort): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateInt): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateLong): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateFloat): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun plus(other: LateDouble): LateDouble = { actual().plus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateByte): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateShort): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateInt): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateLong): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateFloat): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun minus(other: LateDouble): LateDouble = { actual().minus(other.actual()) }.asLateDelegate()
    operator fun times(other: LateByte): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateShort): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateInt): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateLong): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateFloat): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun times(other: LateDouble): LateDouble = { actual().times(other.actual()) }.asLateDelegate()
    operator fun div(other: LateByte): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateShort): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateInt): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateLong): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateFloat): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun div(other: LateDouble): LateDouble = { actual().div(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateByte): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateShort): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateInt): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateLong): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateFloat): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
    operator fun rem(other: LateDouble): LateDouble = { actual().rem(other.actual()) }.asLateDelegate()
}